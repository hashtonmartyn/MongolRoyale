--[[ 

EXAMPLE GAME MODE SCRIPT

This script demonstrates how to use an assortment of SCAR (Scripting at Relic) functions to create a Game Mode for Age of Empires IV. 
We demonstrate how to setup a simple win condition that awards victory to the first player who constructs 5 houses and covers an assortment of topics like building/unit spawning, event tracking, and much more.

Search for the following topic titles (e.g. OPTIONS, RULES, etc.) in this script to see examples of their usage. 

- OPTIONS allow you to add buttons to the Skirmish/Custom lobby when your Game Mode is selected and trigger functions based on what the host has selected. The buttons are added in the Options section of the Win Condition .rdo file and their functionality is driven by this script.
- RULES allow you to call script functions after a delay, on an interval, or whenever a game event (e.g. a unit is killed) occurs.
- OBJECTIVES communicate what the players' goals are and how they are progressing towards them using a UI element at the top left of their screen.
- ENTITIES are the objects you see in-game, like player constructed buildings, Sacred Sites, Stone Deposits, and Trees. Type "Entity_" in this script to view a list of functions you can use to manipulate these objects.
- SQUADS are in-game units. Type "Squad_" in this script to view a list of functions you can use to manipulate these objects.
- ENTITY GROUPS and SQUAD GROUPS (aka EGROUPS/SGROUPS) are bundles of Entities/Squads. It sometimes makes sense to add a number of objects to a group so you can manipulate them together (e.g. you may want to add a group of Spearmen to an SGROUP so you can command them all to attack a location).
- UPGRADES unlock functionality for a player, a unit, or a building.
- BLUEPRINTS are the instructions needed to create an Entity, Squad, or Upgrade. For example, a blueprint exists for each Civilization Villager. If you want to spawn a Mongol Villager, you will need to reference the Mongol Villager Blueprint. Type "BP_" in this script to view a list of Blueprint functions.
- EVENT CUES are messages that appear in the queue at the bottom-right of the player's screen. Some event cues occur automatically, like when an upgrade completes. You can configure your own event cues to communicate important game mode events to the player.

To play and test this Game Mode:

1. From the editor toolbar, select File > Save All to save any changes you have made to this mod.
2. From the editor toolbar, select Build > Build Mod.
3. Launch Age of Empires IV.
4. In the game client, navigate to Single Player > Skirmish > Create Game (alternatively, you can navigate to Multiplayer > Custom > Create Game).
5. In the Game Setup tab of the lobby, select the Edit button.
6. Select your Game Mode* and Start Game.

*Your Game Mode will have a red wrench icon next to it. This means that it is a local mod and you cannot launch with other players in the lobby. If you would like to play this Game Mode with other players, you will either need to:
1. Share your mod file with another player and have them place it in the following directory: YourDriveHere:\Users\YourNameHere\Documents\My Games\Cardinal\mods\extension\local 
2. Publish your Mod from the Mods > My Mods screen. This will publish your Game Mode to all Age of Empires IV players! When a host selects your Game Mode, it will automatically be downloaded for other players in the lobby.


Additional documentation and function references can be found online.

]]

import("cardinal.scar")							-- Contains sfx references, UI templates, and Civ/Age helper functions
import("ScarUtil.scar")							-- Contains game helper functions
import("gamemodes/standard_mode.scar")


-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

-- Global data table that can be referenced in script functions (e.g. _mod.module = "Mod")
_mod = {
	module = "Mod",
	objective_title = "$7488deca100c4f73b764d1a8d2d2e06d:11",
	objective_requirement = 5,
	options = {},
	icons = {
		objective = "icons\\races\\common\\victory_conditions\\victory_condition_conquest",
	},
	circle = {
		pos = World_Pos(0, 0, 0),
		radius = 200,
		splat = {}
	},
	objective = {
		Title = "$7488deca100c4f73b764d1a8d2d2e06d:14",
		Type = ObjectiveType_Optional, 
	},
	sub_objective = {},
	round_num = 0,
	circle_shrink_time_s = 300
}

-- Register the win condition (Some functions can be prepended with "Mod_" to be called automatically as part of the scripting framework)
Core_RegisterModule(_mod.module)

-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------

-- Called during load as part of the game setup sequence
function Mod_OnGameSetup()
	Setup_GetWinConditionOptions(_mod.options)
end

-- Called before initialization, preceding other module OnInit functions
function Mod_PreInit()
	
end


-- Called on match initialization before handing control to the player
function Mod_OnInit()
	_mod.circle = {
		pos = World_Pos(0, 0, 0),
		radius = World_GetWidth() / 2
	},
	Rule_AddOneShot(Mod_SpawnCircle, 5)
end

-- Called after initialization is done when game is fading up from black
function Mod_Start()
	Mod_SetupObjective()
end

-- Called when Core_SetPlayerDefeated() is invoked. Signals that a player has been eliminated from play due to defeat.
function Mod_OnPlayerDefeated(player, reason)
	
end

-- When a victory condition is met, a module must call Core_OnGameOver() in order to invoke this delegate and notify all modules that the match is about to end. Generally used for clean up (removal of rules, objectives, and UI elements specific to the module).
function Mod_OnGameOver()
	
end

-----------------------------------------------------------------------
-- Mod Functions
-----------------------------------------------------------------------

-- This function creates the objective UI that appears in the top-left corner of each player's screen
function Mod_SetupObjective()
	Objective_Register(_mod.objective)
	Objective_Start(_mod.objective, true, false)
end


function Mod_SpawnCircle()
	HintPoint_RemoveAll()
	if _mod.round_num > 0 then
		Splat_Destroy(_mod.circle.splat)
	end
	
	_mod.round_num = _mod.round_num + 1 
	_mod.sub_objective = {
		Title = Loc_FormatText("$7488deca100c4f73b764d1a8d2d2e06d:15", _mod.round_num),
		Type = ObjectiveType_Optional,
		Parent = _mod.objective,
	}
	
	Objective_Register(_mod.sub_objective)
	Objective_StartTimer(_mod.sub_objective, COUNT_DOWN, _mod.circle_shrink_time_s)
	Objective_Start(_mod.sub_objective, true, false)
	Objective_AddAreaHighlight(_mod.sub_objective, _mod.circle.pos, AT_CIRCLE, _mod.circle.radius / World_GetWidth() * 13.5, { 0, 0, 255 }, 0)
	
	scale = _mod.circle.radius * 2.01
	_mod.circle.splat = Splat_Create("tools\\cursor", _mod.circle.pos, scale, scale, 0, 0, 0, 255, 1000, true, true)
	
	Rule_AddOneShot(Mod_KillEntitiesOutsideOfCircle, _mod.circle_shrink_time_s)
end

function Mod_KillEntitiesOutsideOfCircle()
	Objective_Complete(_mod.sub_objective)
	for i, player in pairs(PLAYERS) do
		player_entgroupobs = Player_GetAllEntities(player.id)
		local has_alive_units = false
		
		for i=1,EGroup_Count(player_entgroupobs),1 do
			local entity = EGroup_GetEntityAt(player_entgroupobs, i)
			if Util_GetDistance(Entity_GetPosition(entity), _mod.circle.pos) > _mod.circle.radius then
				Entity_Kill(entity)
			end
		end
	end
	
	local circle_deviation = 0.25 * _mod.circle.radius
	local x_deviation = World_GetRand(circle_deviation * -1, circle_deviation)
	local z_deviation = World_GetRand(circle_deviation * -1, circle_deviation)
	_mod.circle.pos = World_Pos(_mod.circle.pos.x + x_deviation, 0, _mod.circle.pos.z + z_deviation)
	_mod.circle.radius = _mod.circle.radius * 0.75
	
	Rule_AddOneShot(Mod_SpawnCircle, 10)
end

-- Victory Presentation 
-- This creates the large "Victory" stinger that animates for winning players at the end of a match
function Mod_WinnerPresentation(playerID)
	
	-- If player is local
	if playerID == localPlayer.id then
		
		-- Clear player's selection
		Misc_ClearSelection()
		-- Hide UI
		Taskbar_SetVisibility(false)		
		-- Set Win Condition Objective to complete
		Obj_SetState(_mod.objective, OS_Complete)

		-- Trigger objective complete pop up
		Obj_CreatePopup(_mod.objective, _mod.objective_title)
		-- Play Victory sfx
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_COMPLETE)
		-- Set objective to invisible
		Obj_SetVisible(_mod.objective, false)
		
		-- Create Victory Stinger
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, { 
			_playerID = playerID, 
			_icon = _mod.icons.objective, 
			_endType = Loc_GetString(11161277), 					-- "VICTORY"  
			_message = Loc_Empty(),
			_sound = "mus_stinger_landmark_objective_complete_success", 
			_videoURI = "stinger_victory" 
		})
	end
end

-- Defeat Presentation
-- This creates the large "Defeat" stinger that animates for losing players at the end of a match
function Mod_LoserPresentation(playerID)
	
	-- If player is local
	if playerID == localPlayer.id then
		
		-- Clear player's selection
		Misc_ClearSelection()
		-- Hide UI
		Taskbar_SetVisibility(false)		
		-- Set Win Condition Objective to failed
		Obj_SetState(_mod.objective, OS_Failed)

		-- Trigger objective complete pop up
		Obj_CreatePopup(_mod.objective, _mod.objective_title)
		-- Play Victory sfx
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_FAIL)
		-- Set objective to invisible
		Obj_SetVisible(_mod.objective, false)

		-- Create Defeat Stinger
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, {
			_playerID = playerID, 
			_icon = _mod.icons.objective, 
			_endType = Loc_GetString(11045235), 					-- "DEFEAT"  
			_message = Loc_Empty(),
			_sound = "mus_stinger_landmark_objective_complete_fail", 
			_videoURI = "stinger_defeat"})
	end
end
