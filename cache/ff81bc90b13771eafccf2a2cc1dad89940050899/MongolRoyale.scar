--[[ 

EXAMPLE GAME MODE SCRIPT

This script demonstrates how to use an assortment of SCAR (Scripting at Relic) functions to create a Game Mode for Age of Empires IV. 
We demonstrate how to setup a simple win condition that awards victory to the first player who constructs 5 houses and covers an assortment of topics like building/unit spawning, event tracking, and much more.

Search for the following topic titles (e.g. OPTIONS, RULES, etc.) in this script to see examples of their usage. 

- OPTIONS allow you to add buttons to the Skirmish/Custom lobby when your Game Mode is selected and trigger functions based on what the host has selected. The buttons are added in the Options section of the Win Condition .rdo file and their functionality is driven by this script.
- RULES allow you to call script functions after a delay, on an interval, or whenever a game event (e.g. a unit is killed) occurs.
- OBJECTIVES communicate what the players' goals are and how they are progressing towards them using a UI element at the top left of their screen.
- ENTITIES are the objects you see in-game, like player constructed buildings, Sacred Sites, Stone Deposits, and Trees. Type "Entity_" in this script to view a list of functions you can use to manipulate these objects.
- SQUADS are in-game units. Type "Squad_" in this script to view a list of functions you can use to manipulate these objects.
- ENTITY GROUPS and SQUAD GROUPS (aka EGROUPS/SGROUPS) are bundles of Entities/Squads. It sometimes makes sense to add a number of objects to a group so you can manipulate them together (e.g. you may want to add a group of Spearmen to an SGROUP so you can command them all to attack a location).
- UPGRADES unlock functionality for a player, a unit, or a building.
- BLUEPRINTS are the instructions needed to create an Entity, Squad, or Upgrade. For example, a blueprint exists for each Civilization Villager. If you want to spawn a Mongol Villager, you will need to reference the Mongol Villager Blueprint. Type "BP_" in this script to view a list of Blueprint functions.
- EVENT CUES are messages that appear in the queue at the bottom-right of the player's screen. Some event cues occur automatically, like when an upgrade completes. You can configure your own event cues to communicate important game mode events to the player.

To play and test this Game Mode:

1. From the editor toolbar, select File > Save All to save any changes you have made to this mod.
2. From the editor toolbar, select Build > Build Mod.
3. Launch Age of Empires IV.
4. In the game client, navigate to Single Player > Skirmish > Create Game (alternatively, you can navigate to Multiplayer > Custom > Create Game).
5. In the Game Setup tab of the lobby, select the Edit button.
6. Select your Game Mode* and Start Game.

*Your Game Mode will have a red wrench icon next to it. This means that it is a local mod and you cannot launch with other players in the lobby. If you would like to play this Game Mode with other players, you will either need to:
1. Share your mod file with another player and have them place it in the following directory: YourDriveHere:\Users\YourNameHere\Documents\My Games\Cardinal\mods\extension\local 
2. Publish your Mod from the Mods > My Mods screen. This will publish your Game Mode to all Age of Empires IV players! When a host selects your Game Mode, it will automatically be downloaded for other players in the lobby.


Additional documentation and function references can be found online.

]]

-----------------------------------------------------------------------
-- Imported Scripts

-- When you import a .scar file it will be initialized alongside your Game Mode .scar script. 
-- You can also call functions from imported scripts directly. For example, cardinal.scar has a function called Player_SetCurrentAge() that allows you to set the age of a given player. To use this function, you first have to import cardinal.scar as is demonstrated below.
-- To examine the below scripts, right-click on the import() function and select "Open Document"
-----------------------------------------------------------------------

-- Import Utility Scripts
import("cardinal.scar")							-- Contains sfx references, UI templates, and Civ/Age helper functions
import("ScarUtil.scar")							-- Contains game helper functions

-- Import Gameplay Systems
import("gameplay/score.scar")					-- Tracks player score
import("gameplay/diplomacy.scar")				-- Manages Tribute

-- Import Win Conditions
import("winconditions/annihilation.scar")		-- Support for eliminating a player when they can no longer fight or produce units
import("winconditions/elimination.scar")		-- Support for player quitting or dropping (through pause menu or disconnection)
import("winconditions/surrender.scar")			-- Support for player surrender (through pause menu)

-- Import UI Support
import("gameplay/chi/current_dynasty_ui.scar")	-- Displays Chinese Dynasty UI
import("gameplay/event_cues.scar")
import("gameplay/currentageui.scar")


-----------------------------------------------------------------------
-- Data
-----------------------------------------------------------------------

-- Global data table that can be referenced in script functions (e.g. _mod.module = "Mod")
_mod = {
	module = "Mod",
	objective_title = "$7488deca100c4f73b764d1a8d2d2e06d:11",
	objective_requirement = 5,
	options = {},
	icons = {
		objective = "icons\\races\\common\\victory_conditions\\victory_condition_conquest",
	},
	circle = {
		pos = World_Pos(0, 0, 0),
		radius = 200,
		kill_radius = 200
	},
	objective = {
		Title = "Move into the circle",
		Type = ObjectiveType_Optional, 
	},
	circle_shrink_time_s = 60
}

-- Register the win condition (Some functions can be prepended with "Mod_" to be called automatically as part of the scripting framework)
Core_RegisterModule(_mod.module)

-----------------------------------------------------------------------
-- Scripting framework 
-----------------------------------------------------------------------

-- Called during load as part of the game setup sequence
function Mod_OnGameSetup()
	
	-- The following if statement checks which OPTIONS the host of the match selected.
	-- The UI buttons visible to the host via the game lobby are added in the Options section of the Win Condition .rdo file and their functionality is driven by the code below.
	-- In this example, the host can choose to give every play 200 resources per minute or 500 resources per minute
	
	-- Get the host-selected Options configured in the mod's .rdo file
	Setup_GetWinConditionOptions(_mod.options)
	
	-- Check if there is the economy_section data is available.
	-- economy_section matches the name of the OptionsSectionUIDescriptor Key configured in your Game Mode Win Condition .rdo file.
	if _mod.options.economy_section then
		
		-- If host set the resource amount to 200
		if _mod.options.economy_section.resource_amount.enum_value == _mod.options.economy_section.resource_amount.enum_items.resource_200 then
			
			-- Here we are adding the resource amount selected by the host to the global _mod table that was configured above. It will then be easy for us to reference later in the Mod_GiveResources() function
			_mod.resource_amount = 200
			
			-- You can use the print() function to print a string to the console
			-- You can open the console in a match by holding Ctrl+Alt+~
			-- This is useful for testing which parts of your script are running
			print("OPTION SELECTED: 200 Resources per minute")
			
		-- If host sets Economy to Fast
		elseif _mod.options.economy_section.resource_amount.enum_value == _mod.options.economy_section.resource_amount.enum_items.resource_500 then
			
			-- Store the resource amount selected by the host so it can be referenced elsewhere in the script
			_mod.resource_amount = 500
			
			-- Print the selected option to the console for debugging
			print("OPTION SELECTED: 500 Resources per minute")
			
		end
	end
end

-- Called before initialization, preceding other module OnInit functions
function Mod_PreInit()
	
	-- Enables the Tribute UI by calling the TributeEnabled function in diplomacy.scar, which was imported at the top of this script
	-- Remove this or set to false if you do not want players to have access to resource trading via the Tribute panel
	Core_CallDelegateFunctions("TributeEnabled", true)
	
end


-- Called on match initialization before handing control to the player
function Mod_OnInit()
	Rule_AddOneShot(Mod_SpawnCircle, 5)
end

-- Called after initialization is done when game is fading up from black
function Mod_Start()
	Mod_SetupObjective()
end

-- Called when Core_SetPlayerDefeated() is invoked. Signals that a player has been eliminated from play due to defeat.
function Mod_OnPlayerDefeated(player, reason)
	
	
	
end

-- When a victory condition is met, a module must call Core_OnGameOver() in order to invoke this delegate and notify all modules that the match is about to end. Generally used for clean up (removal of rules, objectives, and UI elements specific to the module).
function Mod_OnGameOver()
	

end

-----------------------------------------------------------------------
-- Mod Functions
-----------------------------------------------------------------------

-- This function creates the objective UI that appears in the top-left corner of each player's screen
function Mod_SetupObjective()
	
end


function Get_X_Of_Circle_On_World(angle, radius)
	x_of_circle = radius * math.sin(math.pi * 2 * angle / 360)
	world_width = World_GetWidth() / 2
	return world_width - (world_width - x_of_circle)
end

function Get_Z_Of_Circle_On_World(angle, radius)
	z_of_circle = radius * math.cos(math.pi * 2 * angle / 360)
	world_length = World_GetLength() / 2
	return world_length - (world_length - z_of_circle)
end


function Mod_SpawnCircle()
	HintPoint_RemoveAll()
	for angle=0,360,5 do
		local x = Get_X_Of_Circle_On_World(angle, _mod.circle.radius)
		local z = Get_Z_Of_Circle_On_World(angle, _mod.circle.radius)
		
		HintPoint_Add(World_Pos(x, 0, z), true, "Circle", 10, HPAT_Critical, nil, nil, true)
	end
	
	_mod.circle.kill_radius = _mod.circle.radius
	_mod.circle.radius = _mod.circle.radius * 0.75
	
	Objective_Register(_mod.objective)
	Objective_StartTimer(_mod.objective, COUNT_DOWN, _mod.circle_shrink_time_s)
	Objective_Start(_mod.objective, true, false)
	
	Rule_AddOneShot(Mod_KillEntitiesOutsideOfCircle, _mod.circle_shrink_time_s)
end

function Mod_KillEntitiesOutsideOfCircle()
	Objective_Complete(_mod.objective)
	for i, player in pairs(PLAYERS) do
		player_entgroupobs = Player_GetAllEntities(player.id)
		local has_alive_units = false
		
		for i=1,EGroup_Count(player_entgroupobs),1 do
			local entity = EGroup_GetEntityAt(player_entgroupobs, i)
			if Util_GetDistance(Entity_GetPosition(entity), _mod.circle.pos) > _mod.circle.kill_radius then
				Entity_Kill(entity)
			end
		end
	end
	
	Rule_AddOneShot(Mod_CheckForPlayersWhoShouldBeDead, 5)
	Rule_AddOneShot(Mod_SpawnCircle, 10)
end

function Mod_CheckForPlayersWhoShouldBeDead()
	for i, player in pairs(PLAYERS) do
		player_entgroupobs = Player_GetAllEntities(player.id)
		local has_alive_units = false
		
		for i=1,EGroup_Count(player_entgroupobs),1 do
			local entity = EGroup_GetEntityAt(player_entgroupobs, i)
			has_alive_units = has_alive_units or (Entity_GetHealth(entity) > 0) 
		end
		
		if not has_alive_units and Player_IsAlive(player.id) then
			Core_SetPlayerDefeated(player.id, Mod_LoserPresentation, WR_CONQUEST)
		end
	end
end

-- Victory Presentation 
-- This creates the large "Victory" stinger that animates for winning players at the end of a match
function Mod_WinnerPresentation(playerID)
	
	-- If player is local
	if playerID == localPlayer.id then
		
		-- Clear player's selection
		Misc_ClearSelection()
		-- Hide UI
		Taskbar_SetVisibility(false)		
		-- Set Win Condition Objective to complete
		Obj_SetState(_mod.objective, OS_Complete)

		-- Trigger objective complete pop up
		Obj_CreatePopup(_mod.objective, _mod.objective_title)
		-- Play Victory sfx
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_COMPLETE)
		-- Set objective to invisible
		Obj_SetVisible(_mod.objective, false)
		
		-- Create Victory Stinger
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, { 
			_playerID = playerID, 
			_icon = _mod.icons.objective, 
			_endType = Loc_GetString(11161277), 					-- "VICTORY"  
			_message = Loc_Empty(),
			_sound = "mus_stinger_landmark_objective_complete_success", 
			_videoURI = "stinger_victory" 
		})
	end
end

-- Defeat Presentation
-- This creates the large "Defeat" stinger that animates for losing players at the end of a match
function Mod_LoserPresentation(playerID)
	
	-- If player is local
	if playerID == localPlayer.id then
		
		-- Clear player's selection
		Misc_ClearSelection()
		-- Hide UI
		Taskbar_SetVisibility(false)		
		-- Set Win Condition Objective to failed
		Obj_SetState(_mod.objective, OS_Failed)

		-- Trigger objective complete pop up
		Obj_CreatePopup(_mod.objective, _mod.objective_title)
		-- Play Victory sfx
		Music_PlayStinger(MUS_STING_PRIMARY_OBJ_FAIL)
		-- Set objective to invisible
		Obj_SetVisible(_mod.objective, false)

		-- Create Defeat Stinger
		Rule_AddOneShot(_gameOver_message, 
			GAMEOVER_OBJECTIVE_TIME, {
			_playerID = playerID, 
			_icon = _mod.icons.objective, 
			_endType = Loc_GetString(11045235), 					-- "DEFEAT"  
			_message = Loc_Empty(),
			_sound = "mus_stinger_landmark_objective_complete_fail", 
			_videoURI = "stinger_defeat"})
	end
end
